# This workflow will do a clean install of node dependencies, cache/restore them, build the source code and run lint and npm audit.
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Node.js CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  id-token: write
  contents: read

env:
  BEDROCK_MODEL: "meta.llama3-8b-instruct-v1:0"
  #BEDROCK_MODEL: "us.meta.llama3-2-11b-instruct-v1:0"

jobs:
  build:
    environment:
      name: ci
    timeout-minutes: 10
    #services:
    #  ollama:
    #    image: ollama/ollama:latest
    #    ports:
    #      - 11434:11434

    runs-on: ubuntu-24.04
    strategy:
      matrix:
        node-version: [22.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@ececac1a45f3b08a01d2dd070d28d111c5fe6722 # v4.1.0
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        role-session-name: github-actions-nodejs
        aws-region: us-east-1

      # Log in to the awslabs ECR repository
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@062b18b96a7aff071d4dc91bc00c4c1a7945b076 # v2.0.1
      with:
        registries: 366590864501

    - name: Start background pull of bedrock proxy image
      run: |
        nohup docker pull 366590864501.dkr.ecr.us-east-1.amazonaws.com/bedrock-proxy-api-ecs:latest-amd64 > /dev/null 2>&1 &

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@cdca7365b2dadb8aad0a33bc7601856ffabcc48e # v4.3.0
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    - run: npm ci
    - if: ${{ github.actor != 'dependabot[bot]' && github.actor != 'renovate[bot]' }}
      run: npm audit
    - run: npm run lint

    - name: Setup Environment
      run: |
        # Initiate model pull early to run in background
        #echo "Initiating Ollama model pull..."
        #curl -s -f -L http://localhost:11434/api/pull -H "Content-Type: application/json" \
        #  -d '{"name": "llama3", "stream": false}' &
        sudo curl -fsSLo /usr/share/keyrings/brave-browser-archive-keyring.gpg https://brave-browser-apt-release.s3.brave.com/brave-browser-archive-keyring.gpg
        echo "deb [signed-by=/usr/share/keyrings/brave-browser-archive-keyring.gpg] https://brave-browser-apt-release.s3.brave.com/ stable main" | sudo tee /etc/apt/sources.list.d/brave-browser-release.list
        sudo apt update
        sudo apt install brave-browser patch
        npm run rebrowser-patches

    - name: Start Bedrock Proxy
      run: |
        docker run --rm -d --name bedrock-proxy -p 11434:80 \
          -e "AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}" \
          -e "AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}" \
          -e "AWS_SESSION_TOKEN=${AWS_SESSION_TOKEN}" \
          -e "AWS_REGION=${AWS_REGION}" \
          -e "DEFAULT_MODEL=${BEDROCK_MODEL}" \
          366590864501.dkr.ecr.us-east-1.amazonaws.com/bedrock-proxy-api-ecs:latest-amd64

    #- name: Wait for Ollama model pull
    #  run: |
    #    # Stream pull progress
    #    echo "Displaying Ollama model pull progress..."
    #    curl -s -f -L http://localhost:11434/api/pull -H "Content-Type: application/json" \
    #      -d '{"name": "llama3"}'
    #
    #    # Wait for Ollama to be ready
    #    echo "Waiting for Ollama service..."
    #    for i in {1..5}; do
    #      if curl -s -f http://localhost:11434 >/dev/null 2>&1; then
    #        echo "Ollama is running"
    #        break
    #      fi
    #      echo "Attempt $i failed. Waiting before next attempt..."
    #      sleep 5
    #    done

    - name: Build bundles
      run: |
        npm run build

    - name: Run Tests
      env:
        OPENAI_API_KEY: bedrock
        OPENAI_BASE_URL: http://localhost:11434/api/v1
        OPENAI_MODEL: ${{ env.BEDROCK_MODEL }}
        BRAVE_BINARY: /usr/bin/brave-browser
      run: |
        npm run test:ci
